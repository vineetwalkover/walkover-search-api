/*
 * universal search engine
 * universal search engine api
 *
 * OpenAPI spec version: 1.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.UniversalSearchEngine);
  }
}(this, function(expect, UniversalSearchEngine) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new UniversalSearchEngine.SearchApi();
  });

  describe('(package)', function() {
    describe('SearchApi', function() {
      describe('addIndex', function() {
        it('should call addIndex successfully', function(done) {
          // TODO: uncomment, update parameter values for addIndex call and complete the assertions
          /*
          var name = "name_example";
          var type = "type_example";
          var API_KEY = "API_KEY_example";

          instance.addIndex(name, type, API_KEY, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('addObject', function() {
        it('should call addObject successfully', function(done) {
          // TODO: uncomment, update parameter values for addObject call and complete the assertions
          /*
          var indexName = "indexName_example";
          var API_KEY = "API_KEY_example";
          var _object = new UniversalSearchEngine.ModelObject();

          instance.addObject(indexName, API_KEY, _object, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('addObjects', function() {
        it('should call addObjects successfully', function(done) {
          // TODO: uncomment, update parameter values for addObjects call and complete the assertions
          /*
          var indexName = "indexName_example";
          var API_KEY = "API_KEY_example";
          var objectsList = [new UniversalSearchEngine.[Object]()];

          instance.addObjects(indexName, API_KEY, objectsList, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('copyIndexConfig', function() {
        it('should call copyIndexConfig successfully', function(done) {
          // TODO: uncomment, update parameter values for copyIndexConfig call and complete the assertions
          /*
          var API_KEY = "API_KEY_example";
          var src = "src_example";
          var dest = "dest_example";

          instance.copyIndexConfig(API_KEY, src, dest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAllData', function() {
        it('should call deleteAllData successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteAllData call and complete the assertions
          /*
          var indexName = "indexName_example";
          var API_KEY = "API_KEY_example";

          instance.deleteAllData(indexName, API_KEY, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteIndex', function() {
        it('should call deleteIndex successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteIndex call and complete the assertions
          /*
          var index = "index_example";
          var API_KEY = "API_KEY_example";

          instance.deleteIndex(index, API_KEY, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteObject', function() {
        it('should call deleteObject successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteObject call and complete the assertions
          /*
          var indexName = "indexName_example";
          var API_KEY = "API_KEY_example";
          var objectID = "objectID_example";

          instance.deleteObject(indexName, API_KEY, objectID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('generateEvent', function() {
        it('should call generateEvent successfully', function(done) {
          // TODO: uncomment, update parameter values for generateEvent call and complete the assertions
          /*
          var indexName = "indexName_example";
          var API_KEY = "API_KEY_example";
          var type = "type_example";
          var _object = new UniversalSearchEngine.ModelObject();

          instance.generateEvent(indexName, API_KEY, type, _object, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllIndices', function() {
        it('should call getAllIndices successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllIndices call and complete the assertions
          /*
          var API_KEY = "API_KEY_example";

          instance.getAllIndices(API_KEY, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllObjects', function() {
        it('should call getAllObjects successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllObjects call and complete the assertions
          /*
          var index = "index_example";
          var API_KEY = "API_KEY_example";

          instance.getAllObjects(index, API_KEY, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchQuery', function() {
        it('should call searchQuery successfully', function(done) {
          // TODO: uncomment, update parameter values for searchQuery call and complete the assertions
          /*
          var indexName = "indexName_example";
          var query = "query_example";
          var API_KEY = "API_KEY_example";
          var opts = {};
          opts.size = 56;
          opts.userToken = "userToken_example";
          opts.searchParameters = new UniversalSearchEngine.SearchParameters();

          instance.searchQuery(indexName, query, API_KEY, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
