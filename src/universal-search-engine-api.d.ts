/** Declaration file generated by dts-gen */

export class ApiClient {
    constructor();

    applyAuthToRequest(request: any, authNames: any): void;

    buildCollectionParam(param: any, collectionFormat: any): any;

    buildUrl(path: any, pathParams: any): any;

    callApi(path: any, httpMethod: any, pathParams: any, queryParams: any, collectionQueryParams: any, headerParams: any, formParams: any, bodyParam: any, authNames: any, contentTypes: any, accepts: any, returnType: any, callback: any): any;

    deserialize(response: any, returnType: any): any;

    isFileParam(param: any): any;

    isJsonMime(contentType: any): any;

    jsonPreferredMime(contentTypes: any): any;

    normalizeParams(params: any): any;

    paramToString(param: any): any;

    static CollectionFormatEnum: {
        CSV: string;
        MULTI: string;
        PIPES: string;
        SSV: string;
        TSV: string;
    };

    static constructFromObject(data: any, obj: any, itemType: any): void;

    static convertToType(data: any, type: any): any;

    static parseDate(str: any): any;

}

export class ModelObject {
    constructor();

    static constructFromObject(data: any, obj: any): any;

}

export class Object1 {
    constructor();

    static constructFromObject(data: any, obj: any): any;

}

export class SearchParameters {
    constructor();

    static constructFromObject(data: any, obj: any): any;

}

export function WalkoverSearch(apiClient: any): any;

export namespace ApiClient {
    namespace instance {
        const authentications: {
        };

        const basePath: string;

        const cache: boolean;

        const defaultHeaders: {
        };

        const enableCookies: boolean;

        const requestAgent: any;

        const timeout: number;

        function applyAuthToRequest(request: any, authNames: any): void;

        function buildCollectionParam(param: any, collectionFormat: any): any;

        function buildUrl(path: any, pathParams: any): any;

        function callApi(path: any, httpMethod: any, pathParams: any, queryParams: any, collectionQueryParams: any, headerParams: any, formParams: any, bodyParam: any, authNames: any, contentTypes: any, accepts: any, returnType: any, callback: any): any;

        function deserialize(response: any, returnType: any): any;

        function isFileParam(param: any): any;

        function isJsonMime(contentType: any): any;

        function jsonPreferredMime(contentTypes: any): any;

        function normalizeParams(params: any): any;

        function paramToString(param: any): any;

        namespace agent {
            function acl(url: any, fn: any): any;

            function bind(url: any, fn: any): any;

            function checkout(url: any, fn: any): any;

            function connect(url: any, fn: any): any;

            function copy(url: any, fn: any): any;

            function del(url: any, fn: any): any;

            function get(url: any, fn: any): any;

            function head(url: any, fn: any): any;

            function link(url: any, fn: any): any;

            function lock(url: any, fn: any): any;

            function merge(url: any, fn: any): any;

            function mkactivity(url: any, fn: any): any;

            function mkcalendar(url: any, fn: any): any;

            function mkcol(url: any, fn: any): any;

            function move(url: any, fn: any): any;

            function notify(url: any, fn: any): any;

            function options(url: any, fn: any): any;

            function patch(url: any, fn: any): any;

            function post(url: any, fn: any): any;

            function propfind(url: any, fn: any): any;

            function proppatch(url: any, fn: any): any;

            function purge(url: any, fn: any): any;

            function put(url: any, fn: any): any;

            function rebind(url: any, fn: any): any;

            function report(url: any, fn: any): any;

            function search(url: any, fn: any): any;

            function source(url: any, fn: any): any;

            function subscribe(url: any, fn: any): any;

            function trace(url: any, fn: any): any;

            function unbind(url: any, fn: any): any;

            function unlink(url: any, fn: any): any;

            function unlock(url: any, fn: any): any;

            function unsubscribe(url: any, fn: any): any;

            namespace jar {
                // Too-deep object hierarchy from universal_search_engine_api.ApiClient.instance.agent.jar
                const getCookie: any;

                // Too-deep object hierarchy from universal_search_engine_api.ApiClient.instance.agent.jar
                const getCookies: any;

                // Too-deep object hierarchy from universal_search_engine_api.ApiClient.instance.agent.jar
                const setCookie: any;

                // Too-deep object hierarchy from universal_search_engine_api.ApiClient.instance.agent.jar
                const setCookies: any;

            }

        }

    }

}

